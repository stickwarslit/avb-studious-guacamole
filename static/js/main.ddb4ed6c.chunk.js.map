{"version":3,"sources":["data/contacts.tsx","context/Contact.tsx","ContactsList.tsx","PlusButton.tsx","WelcomeView.tsx","MinusButton.tsx","ContactDisplay.tsx","ContactCreate.tsx","ContactUpdate.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","getPage","a","pageNum","pageSize","url","fetch","response","ok","Error","statusText","json","body","getOne","contactId","update","contact","id","params","method","headers","accept","JSON","stringify","del","isNaN","create","updatedContact","blankContact","NaN","firstName","lastName","emails","contextDefault","contacts","lastPage","canLoadMore","setContactState","fetchMoreContacts","deleteContact","upsertContact","getOrFetchContact","ContactContext","createContext","ContactContextProvider","props","useState","setPageNum","setCanLoadMore","setContacts","page","itemsPerPage","totalItems","concat","contactToDelete","deleteRequest","updatedContacts","filter","updateContact","updated","updateRequest","map","createContact","createRequest","responseContact","undefined","localContact","find","getOneRequest","contextValue","Provider","value","children","useContact","useContext","ContactsList","onClick","match","useRouteMatch","selectedContactId","setSelectedContactId","useEffect","parseInt","isLoading","setIsLoading","handleLoad","listItems","className","loadButton","PlusButton","size","WelcomeView","href","MinusButton","EMAIL_REGEX","ContactsDisplay","onDelete","onCancel","onSave","isNew","setFirstName","setLastName","setEmails","isAddingEmail","setAddingEmail","newEmail","setNewEmail","message","setMessage","refreshContactInfo","handleSave","handleDelete","type","onChange","e","target","email","emailToDelete","test","ContactCreate","history","useHistory","push","ContactUpdate","useParams","location","useLocation","setContact","setIsNew","foundContact","getContact","state","Body","path","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddb4ed6c.chunk.js","sourcesContent":["export interface Contact {\n  id: number\n  firstName: string\n  lastName: string\n  emails: Array<string>\n}\n\nexport interface Page {\n  contacts: Contact[]\n  page: number\n  itemsPerPage: 20\n  totalItems: 17\n}\n\nconst BASE_URL = \"https://avb-contacts-api.herokuapp.com\"\n\nexport const getPage = async (pageNum = 1, pageSize = 20): Promise<Page> => {\n  const url = `${BASE_URL}/contacts/paginated?page=${pageNum}&itemsPerPage=${pageSize}`\n  const response = await fetch(url)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const body = await response.json()\n\n  return body as Page\n}\n\nexport const getOne = async (contactId: number): Promise<Contact> => {\n  const url = `${BASE_URL}/contacts/${contactId}`\n  const response = await fetch(url)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  return await response.json() as Contact\n}\n\nexport const update = async (contact: Contact): Promise<void> => {\n  const url = `${BASE_URL}/contacts/${contact.id}`\n\n  const params = {\n    method: 'PUT',\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(contact)\n  }\n\n  const response = await fetch(url, params)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n}\n\nexport const del = async (contact: Contact): Promise<void> => {\n  if (isNaN(contact.id)) {\n    return\n  }\n\n  const url = `${BASE_URL}/contacts/${contact.id}`\n\n  const params = { method: 'DELETE' }\n\n  const response = await fetch(url, params)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n}\n\nexport const create = async (contact: Contact): Promise<Contact> => {\n  const url = `${BASE_URL}/contacts`\n\n  const params = {\n    method: 'POST',\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(contact)\n  }\n\n  const response = await fetch(url, params)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const updatedContact = await response.json()\n\n  return updatedContact as Contact\n}\n","import React, {useState, createContext, useContext} from 'react'\nimport { \n  Contact, \n  getPage, \n  create as createRequest,\n  update as updateRequest,\n  del as deleteRequest,\n  getOne as getOneRequest\n} from '../data/contacts'\n\nexport type ContactContextType = {\n  contacts: Contact[],\n  lastPage: number,\n  canLoadMore: boolean,\n  setContactState: (contacts: Contact[]) => void,\n  fetchMoreContacts: () => Promise<void>,\n  deleteContact: (contact: Contact) => Promise<void>,\n  upsertContact: (contact: Contact) => Promise<Contact>,\n  getOrFetchContact: (contactId: number) => Promise<Contact>\n}\n\nconst blankContact: Contact = {\n  id: NaN,\n  firstName: \"\",\n  lastName: \"\",\n  emails: []\n}\n\nconst contextDefault: ContactContextType = {\n  contacts: [],\n  lastPage: 1,\n  canLoadMore: true,\n  setContactState: () => {},\n  fetchMoreContacts: async () => {},\n  deleteContact: async () => {},\n  upsertContact: async () => {return blankContact},\n  getOrFetchContact: async () => {return blankContact}\n}\n\nexport const ContactContext = createContext<ContactContextType>(contextDefault)\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport const ContactContextProvider = (props: Props) => {\n  const [pageNum, setPageNum] = useState(1)\n  const [canLoadMore, setCanLoadMore] = useState(true)\n  const [contacts, setContacts] = useState<Contact[]>([])\n\n  const fetchMoreContacts = async () => {\n    const page = await getPage(pageNum, 20)\n    setCanLoadMore(page.page * page.itemsPerPage < page.totalItems)\n    setPageNum(pageNum + 1)\n    setContacts(contacts.concat(page.contacts))\n  }\n\n  const deleteContact = async (contactToDelete: Contact) => {\n    await deleteRequest(contactToDelete)\n    const updatedContacts = contacts.filter(({id}) => id !== contactToDelete.id)\n    setContacts(updatedContacts)\n  }\n\n  const updateContact = async (updated: Contact) => {\n    await updateRequest(updated)\n    const updatedContacts = contacts.map((contact) =>  {\n      return contact.id === updated.id\n        ? updated\n        : contact\n    })\n    setContacts(updatedContacts)\n  }\n\n  const createContact = async (contact: Contact) => {\n    const responseContact = await createRequest(contact)\n    setContacts(contacts.concat(responseContact))\n    return responseContact\n  }\n\n  const upsertContact = async (contact: Contact): Promise<Contact> => {\n    if (isNaN(contact.id)) {\n      return await createContact(contact)\n    } else {\n      await updateContact(contact)\n      return contact\n    }\n  }\n\n  const getOrFetchContact = async (contactId: number) => {\n    const localContact = contacts.find(({id}) => contactId === id)\n    if (localContact !== undefined) {\n      return localContact\n    }\n\n    return await getOneRequest(contactId)\n  }\n\n  const contextValue: ContactContextType = {\n    contacts,\n    lastPage: pageNum,\n    canLoadMore: canLoadMore,\n    setContactState: setContacts,\n    fetchMoreContacts,\n    deleteContact,\n    upsertContact,\n    getOrFetchContact\n  }\n\n  return (\n    <ContactContext.Provider value={contextValue}>\n      {props.children}\n    </ContactContext.Provider>\n  )\n}\n\nexport const useContact = (): ContactContextType => useContext(ContactContext)\n\n","import React, { useState, useEffect } from 'react'\nimport { useRouteMatch } from 'react-router-dom'\nimport { useContact } from './context/Contact'\nimport './ContactsList.scss'\nimport { Contact } from './data/contacts'\n\ninterface Props {\n  onClick: (contact: Contact) => any\n}\n\ninterface Params {\n  contactId?: string\n}\n\nexport default function ContactsList({ onClick }:Props) {\n  const { contacts, fetchMoreContacts, canLoadMore } = useContact()\n  const match = useRouteMatch<Params>('/:contactId')\n\n  const [selectedContactId, setSelectedContactId] = useState(NaN)\n\n  useEffect(() => {\n    if (match !== null && match.params.contactId !== undefined) {\n      setSelectedContactId(parseInt(match.params.contactId, 10))\n    }\n  }, [match])\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleLoad = async () => {\n    setIsLoading(true)\n    await fetchMoreContacts()\n    setIsLoading(false)\n  }\n\n  const listItems = contacts.map(\n    (contact) => \n      <li \n        key={contact.id} \n        onClick={() => {onClick(contact)}}\n        className={selectedContactId === contact.id ? \"selected\" : \"\"}\n      >\n        {contact.firstName} {contact.lastName}\n      </li>\n  )\n\n  const loadButton = \n    canLoadMore\n      ? <li>\n          {\n            isLoading\n              ? \"Loading...\"\n              : <button onClick={handleLoad}>Load more</button>\n          }\n        </li>\n      : \"\"\n\n  return (\n    <ul className=\"contacts-list\">\n      {listItems}\n      {loadButton}\n    </ul>\n  )\n}\n","import React from 'react'\nimport './PlusButton.scss'\n\ninterface Props {\n  onClick: () => void\n  size: \"large\" | \"small\"\n}\n\nexport default function PlusButton({ onClick, size }: Props) {\n  return (\n    <button className={`plus-button ${size}`} onClick={onClick}>\n      <span className=\"vertical-bar\"></span>\n      <span className=\"horizontal-bar\"></span>\n    </button>\n  )\n}\n","import React from 'react'\nimport './WelcomeView.scss'\n\nexport default function WelcomeView() {\n  return (\n    <div className=\"welcome-view\">\n      <h1>Welcome!</h1>\n      <span>\n        <div>\n        Click on a contact in the list on the left to edit its information. \n        Or, click on the plus button in the top left to create a brand new contact.\n        </div>\n        <div>\n          Created by Mark Del Rosario. <a href=\"https://github.com/\">Github Profile</a>\n        </div>\n      </span>\n    </div>\n  )\n}\n","import React from 'react'\nimport './MinusButton.scss'\n\ninterface Props {\n  onClick: () => void\n  className: string\n}\n\nexport default function MinusButton({ onClick, className }: Props) {\n  return (\n    <button className={`minus-button ${className}`} onClick={onClick}>\n      <span className=\"horizontal-bar\"></span>\n    </button>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Contact } from './data/contacts'\nimport { useContact } from './context/Contact'\nimport PlusButton from './PlusButton'\nimport MinusButton from './MinusButton'\nimport './ContactDisplay.scss'\n\n// Copied from https://ihateregex.io/expr/email/\nconst EMAIL_REGEX = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/\n\nconst isValidEmail = (email: string): boolean => {\n  return EMAIL_REGEX.test(email)\n}\n\ninterface Props {\n  contact: Contact\n  onDelete: (contact: Contact) => void\n  onCancel: (contact: Contact) => void\n  onSave: (contact: Contact) => void\n  isNew?: boolean\n}\n\nexport default function ContactsDisplay(props: Props) {\n  const {contact, onDelete, onCancel, onSave, isNew} = props\n  const { upsertContact, deleteContact } = useContact()\n\n  const [firstName, setFirstName] = useState(contact.firstName)\n  const [lastName, setLastName] = useState(contact.lastName)\n  const [emails, setEmails] = useState(contact.emails)\n\n  const [isAddingEmail, setAddingEmail] = useState(false)\n  const [newEmail, setNewEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  const refreshContactInfo = () => {\n    if (contact != null) {\n      setFirstName(contact.firstName)\n      setLastName(contact.lastName)\n      setEmails(contact.emails)\n      setNewEmail(\"\")\n      setAddingEmail(false)\n    }\n  }\n\n  // Change contact display info when contact changes\n  useEffect(refreshContactInfo, [contact])\n\n  useEffect(() => {isNew && setMessage(\"Contact Created!\")}, [isNew])\n\n  const handleFirstNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setFirstName(e.target.value)\n  const handleLastNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setLastName(e.target.value)\n  const handleNewEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => setNewEmail(e.target.value)\n\n  const completeNewEmail = () => {\n    if (isValidEmail(newEmail)) {\n      setEmails(emails.concat(newEmail))\n      setNewEmail(\"\")\n      setAddingEmail(false)\n      setMessage(\"\")\n    } else {\n      setMessage(\"Invalid email address\")\n    }\n  }\n\n  const removeEmail = (emailToDelete: string) => {\n    setEmails(emails.filter(email => email !== emailToDelete))\n  }\n\n  const handleSave = async () => {\n    if (firstName === \"\") {\n      setMessage(\"Must have First Name\")\n      return\n    }\n\n    if (lastName === \"\") {\n      setMessage(\"Must have Last Name\")\n      return\n    }\n\n    let updatedContact: Contact = {\n      ...contact,\n      firstName,\n      lastName,\n      emails\n    }\n\n    updatedContact = await upsertContact(updatedContact)\n\n    setMessage(\"Saved Successfully\")\n    onSave(updatedContact)\n  }\n\n  const handleDelete = async () => {\n    onDelete(contact)\n    await deleteContact(contact)\n  }\n\n  const handleCancel = () => {\n    refreshContactInfo()\n    onCancel(contact)\n  }\n\n  return (\n    <article className=\"contact-display\">\n      <div className=\"first-name\">\n        <label>First Name: </label>\n        <input type=\"text\" value={firstName} onChange={handleFirstNameChange}/>\n      </div>\n\n      <div className=\"last-name\">\n        <label>Last Name: </label>\n        <input type=\"text\" value={lastName} onChange={handleLastNameChange}/>\n      </div>\n\n      <div className=\"emails\">\n        <label>Emails</label>\n        <ul>\n          { emails.map(email => \n            <li key={email}>\n              <div>{email}</div>\n              <MinusButton \n                onClick={() => removeEmail(email)} \n                className=\"remove\"\n              />\n            </li>\n          )}\n          { isAddingEmail\n              ? <li className=\"add-email-form\">\n                  <label>New Email: </label> \n                  <input \n                    type=\"text\" \n                    value={newEmail} \n                    onChange={handleNewEmailChange} \n                  />\n                  <button onClick={completeNewEmail}>Complete</button>\n                </li>\n              : <li onClick={() => setAddingEmail(true)} className=\"add-email\">\n                  <PlusButton onClick={() => setAddingEmail(true)} size=\"small\" />\n                  <div>add email</div>\n                </li>\n          }\n        </ul>\n      </div>\n\n      <div className=\"message\">\n        {message}\n      </div>\n\n      <div className=\"buttons\">\n        <button className=\"delete\" onClick={handleDelete}>Delete</button>\n        <button className=\"cancel\" onClick={handleCancel}>Cancel</button>\n        <button className=\"save\" onClick={handleSave}>Save</button>\n      </div>\n\n    \n    </article>\n  )\n\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Contact } from './data/contacts'\nimport ContactDisplay from './ContactDisplay'\n\nexport default function ContactCreate() {\n  const history = useHistory()\n\n  const blankContact: Contact = {\n    id: NaN,\n    firstName: \"\",\n    lastName: \"\",\n    emails: []\n  }\n\n  const onSave = \n    (contact: Contact) => history.push(`/${contact.id}`, { isNew: true })\n\n  const onCancel = () => history.push('')\n\n  return (\n    <>\n      <ContactDisplay \n        contact={blankContact}\n        onSave={onSave}\n        onCancel={onCancel}\n        onDelete={onCancel}\n      />\n    </>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport { Contact } from './data/contacts'\nimport { useHistory, useParams, useLocation } from 'react-router-dom'\nimport { useContact } from './context/Contact'\nimport ContactDisplay from './ContactDisplay'\n\ninterface Params {\n  contactId: string\n}\n\nexport default function ContactUpdate() {\n  const { getOrFetchContact } = useContact()\n  const history = useHistory()\n  const params = useParams<Params>()\n  const location = useLocation<{isNew?: boolean}>()\n\n  const [contact, setContact] = useState<Contact | null>(null)\n  const [isNew, setIsNew] = useState(false)\n\n  useEffect(() => {\n    const getContact = async () => {\n      const contactId = parseInt(params.contactId)\n      const foundContact = await getOrFetchContact(contactId)\n      setContact(foundContact)\n    }\n    getContact()\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params])\n\n  useEffect(() => {\n    setIsNew(!!location.state.isNew)\n\n  }, [location])\n\n  const onCancel = () => history.push('')\n\n  return (\n    <>\n      {\n        contact === null\n          ? \"Loading...\"\n          : <ContactDisplay \n              contact={contact}\n              onSave={() => {}}\n              onCancel={onCancel}\n              onDelete={onCancel}\n              isNew={isNew}\n            />\n      }\n    </>\n  )\n\n}\n","import React, { useEffect } from 'react'\nimport { \n  BrowserRouter, \n  Switch, \n  Route,\n  useHistory\n} from 'react-router-dom'\nimport './App.scss'\nimport { ContactContextProvider, useContact } from './context/Contact'\nimport ContactsList from './ContactsList'\nimport PlusButton from './PlusButton'\nimport WelcomeView from './WelcomeView'\nimport ContactCreate from './ContactCreate'\nimport ContactUpdate from './ContactUpdate'\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/avb-studious-guacamole\">\n      <ContactContextProvider>\n        <Body/>\n      </ContactContextProvider>\n    </BrowserRouter>\n  )\n}\n\nfunction Body() {\n  const {fetchMoreContacts} = useContact()\n\n  const history = useHistory()\n\n  // Fetch first page of contacts on page load\n  useEffect(() => {\n    fetchMoreContacts()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      <div className=\"sidebar\">\n        <div className=\"header\">\n          <h1>Contacts</h1>\n          <PlusButton onClick={() => history.push('/new')} size=\"large\" />\n        </div>\n        <ContactsList onClick={({id}) => history.push(`/${id}`)}/>\n      </div>\n      <div className=\"content\">\n        <Switch>\n          <Route path=\"/new\">\n            <ContactCreate />\n          </Route>\n\n          <Route path=\"/:contactId\">\n            <ContactUpdate />\n          </Route>\n\n          <Route path=\"/\">\n            <WelcomeView />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)  \n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}