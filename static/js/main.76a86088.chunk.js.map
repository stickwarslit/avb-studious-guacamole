{"version":3,"sources":["data/contacts.tsx","context/Contact.tsx","ContactsList.tsx","PlusButton.tsx","MinusButton.tsx","ContactDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","getPage","a","pageNum","pageSize","url","fetch","response","ok","Error","statusText","json","body","update","contact","id","params","method","headers","accept","JSON","stringify","del","isNaN","create","updatedContact","blankContact","NaN","firstName","lastName","emails","contextDefault","contacts","lastPage","canLoadMore","setContactState","fetchMoreContacts","deleteContact","upsertContact","ContactContext","createContext","ContactContextProvider","props","useState","setPageNum","setCanLoadMore","setContacts","page","itemsPerPage","totalItems","concat","contactToDelete","deleteRequest","updatedContacts","filter","updateContact","updated","updateRequest","map","createContact","createRequest","responseContact","contextValue","Provider","value","children","useContact","useContext","ContactsList","onClick","selectedContactId","isLoading","setIsLoading","handleLoad","listItems","className","loadButton","PlusButton","size","MinusButton","EMAIL_REGEX","ContactsDisplay","onDelete","onCancel","onSave","setFirstName","setLastName","setEmails","isAddingEmail","setAddingEmail","newEmail","setNewEmail","message","setMessage","refreshContactInfo","useEffect","handleSave","handleDelete","type","onChange","e","target","email","emailToDelete","test","Body","contactId","setContactId","setContact","result","find","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76a86088.chunk.js","sourcesContent":["export interface Contact {\n  id: number\n  firstName: string\n  lastName: string\n  emails: Array<string>\n}\n\nexport interface Page {\n  contacts: Contact[]\n  page: number\n  itemsPerPage: 20\n  totalItems: 17\n}\n\nconst BASE_URL = \"https://avb-contacts-api.herokuapp.com\"\n\nexport const getPage = async (pageNum = 1, pageSize = 20): Promise<Page> => {\n  const url = `${BASE_URL}/contacts/paginated?page=${pageNum}&itemsPerPage=${pageSize}`\n  const response = await fetch(url)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const body = await response.json()\n\n  return body as Page\n}\n\nexport const update = async (contact: Contact): Promise<void> => {\n  const url = `${BASE_URL}/contacts/${contact.id}`\n\n  const params = {\n    method: 'PUT',\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(contact)\n  }\n\n  const response = await fetch(url, params)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n}\n\nexport const del = async (contact: Contact): Promise<void> => {\n  if (isNaN(contact.id)) {\n    return\n  }\n\n  const url = `${BASE_URL}/contacts/${contact.id}`\n\n  const params = { method: 'DELETE' }\n\n  const response = await fetch(url, params)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n}\n\nexport const create = async (contact: Contact): Promise<Contact> => {\n  const url = `${BASE_URL}/contacts`\n\n  const params = {\n    method: 'POST',\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(contact)\n  }\n\n  const response = await fetch(url, params)\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const updatedContact = await response.json()\n\n  return updatedContact as Contact\n}\n","import React, {useState, createContext, useContext} from 'react'\nimport { \n  Contact, \n  getPage, \n  create as createRequest,\n  update as updateRequest,\n  del as deleteRequest\n} from '../data/contacts'\n\nexport type ContactContextType = {\n  contacts: Contact[],\n  lastPage: number,\n  canLoadMore: boolean,\n  setContactState: (contacts: Contact[]) => void,\n  fetchMoreContacts: () => Promise<void>,\n  deleteContact: (contact: Contact) => Promise<void>,\n  upsertContact: (contact: Contact) => Promise<Contact>\n}\n\nconst blankContact: Contact = {\n  id: NaN,\n  firstName: \"\",\n  lastName: \"\",\n  emails: []\n}\n\nconst contextDefault: ContactContextType = {\n  contacts: [],\n  lastPage: 1,\n  canLoadMore: true,\n  setContactState: () => {},\n  fetchMoreContacts: async () => {},\n  deleteContact: async () => {},\n  upsertContact: async () => {return blankContact}\n}\n\nexport const ContactContext = createContext<ContactContextType>(contextDefault)\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport const ContactContextProvider = (props: Props) => {\n  const [pageNum, setPageNum] = useState(1)\n  const [canLoadMore, setCanLoadMore] = useState(true)\n  const [contacts, setContacts] = useState<Contact[]>([])\n\n  const fetchMoreContacts = async () => {\n    const page = await getPage(pageNum, 20)\n    setCanLoadMore(page.page * page.itemsPerPage < page.totalItems)\n    setPageNum(pageNum + 1)\n    setContacts(contacts.concat(page.contacts))\n  }\n\n  const deleteContact = async (contactToDelete: Contact) => {\n    await deleteRequest(contactToDelete)\n    const updatedContacts = contacts.filter(({id}) => id !== contactToDelete.id)\n    setContacts(updatedContacts)\n  }\n\n  const updateContact = async (updated: Contact) => {\n    await updateRequest(updated)\n    const updatedContacts = contacts.map((contact) =>  {\n      return contact.id === updated.id\n        ? updated\n        : contact\n    })\n    setContacts(updatedContacts)\n  }\n\n  const createContact = async (contact: Contact) => {\n    const responseContact = await createRequest(contact)\n    setContacts(contacts.concat(responseContact))\n    return responseContact\n  }\n\n  const upsertContact = async (contact: Contact): Promise<Contact> => {\n    if (isNaN(contact.id)) {\n      return await createContact(contact)\n    } else {\n      await updateContact(contact)\n      return contact\n    }\n  }\n\n  const contextValue: ContactContextType = {\n    contacts,\n    lastPage: pageNum,\n    canLoadMore: canLoadMore,\n    setContactState: setContacts,\n    fetchMoreContacts,\n    deleteContact,\n    upsertContact\n  }\n\n  return (\n    <ContactContext.Provider value={contextValue}>\n      {props.children}\n    </ContactContext.Provider>\n  )\n}\n\nexport const useContact = (): ContactContextType => useContext(ContactContext)\n\n","import React, { useState } from 'react'\nimport { useContact } from './context/Contact'\nimport './ContactsList.scss'\nimport { Contact } from './data/contacts'\n\ninterface Props {\n  onClick: (contact: Contact) => any\n  selectedContactId: number | null\n}\n\nexport default function ContactsList({ onClick, selectedContactId }:Props) {\n  const { contacts, fetchMoreContacts, canLoadMore } = useContact()\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleLoad = async () => {\n    setIsLoading(true)\n    await fetchMoreContacts()\n    setIsLoading(false)\n  }\n\n  const listItems = contacts.map(\n    (contact) => \n      <li \n        key={contact.id} \n        onClick={() => {onClick(contact)}}\n        className={selectedContactId === contact.id ? \"selected\" : \"\"}\n      >\n        {contact.firstName} {contact.lastName}\n      </li>\n  )\n\n  const loadButton = \n    canLoadMore\n      ? <li>\n          {\n            isLoading\n              ? \"Loading...\"\n              : <button onClick={handleLoad}>Load more</button>\n          }\n        </li>\n      : \"\"\n\n  return (\n    <ul className=\"contacts-list\">\n      {listItems}\n      {loadButton}\n    </ul>\n\n  )\n}\n","import React from 'react'\nimport './PlusButton.scss'\n\ninterface Props {\n  onClick: () => void\n  size: \"large\" | \"small\"\n}\n\nexport default function PlusButton({ onClick, size }: Props) {\n  return (\n    <button className={`plus-button ${size}`} onClick={onClick}>\n      <span className=\"vertical-bar\"></span>\n      <span className=\"horizontal-bar\"></span>\n    </button>\n  )\n}\n","import React from 'react'\nimport './MinusButton.scss'\n\ninterface Props {\n  onClick: () => void\n  className: string\n}\n\nexport default function MinusButton({ onClick, className }: Props) {\n  return (\n    <button className={`minus-button ${className}`} onClick={onClick}>\n      <span className=\"horizontal-bar\"></span>\n    </button>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Contact } from './data/contacts'\nimport { useContact } from './context/Contact'\nimport PlusButton from './PlusButton'\nimport MinusButton from './MinusButton'\nimport './ContactDisplay.scss'\n\n// Copied from https://ihateregex.io/expr/email/\nconst EMAIL_REGEX = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/\n\nconst isValidEmail = (email: string): boolean => {\n  return EMAIL_REGEX.test(email)\n}\n\ninterface Props {\n  contact: Contact\n  onDelete: (contact: Contact) => void\n  onCancel: () => void\n  onSave: (contact: Contact) => void\n}\n\nexport default function ContactsDisplay({contact, onDelete, onCancel, onSave}: Props) {\n  const { upsertContact, deleteContact } = useContact()\n\n  const [firstName, setFirstName] = useState(contact.firstName)\n  const [lastName, setLastName] = useState(contact.lastName)\n  const [emails, setEmails] = useState(contact.emails)\n\n  const [isAddingEmail, setAddingEmail] = useState(false)\n  const [newEmail, setNewEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  const refreshContactInfo = () => {\n    if (contact != null) {\n      setFirstName(contact.firstName)\n      setLastName(contact.lastName)\n      setEmails(contact.emails)\n      setNewEmail(\"\")\n      setAddingEmail(false)\n    }\n  }\n\n  // Change contact display info when contact changes\n  useEffect(refreshContactInfo, [contact])\n\n  const handleFirstNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setFirstName(e.target.value)\n  const handleLastNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setLastName(e.target.value)\n  const handleNewEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => setNewEmail(e.target.value)\n\n  const completeNewEmail = () => {\n    if (isValidEmail(newEmail)) {\n      setEmails(emails.concat(newEmail))\n      setNewEmail(\"\")\n      setAddingEmail(false)\n      setMessage(\"\")\n    } else {\n      setMessage(\"Invalid email address\")\n    }\n  }\n\n  const removeEmail = (emailToDelete: string) => {\n    setEmails(emails.filter(email => email !== emailToDelete))\n  }\n\n  const handleSave = async () => {\n    if (firstName === \"\") {\n      setMessage(\"Must have First Name\")\n      return\n    }\n\n    if (lastName === \"\") {\n      setMessage(\"Must have Last Name\")\n      return\n    }\n\n    let updatedContact: Contact = {\n      ...contact,\n      firstName,\n      lastName,\n      emails\n    }\n\n    updatedContact = await upsertContact(updatedContact)\n\n    setMessage(\"Saved Successfully\")\n    onSave(updatedContact)\n  }\n\n  const handleDelete = async () => {\n    await deleteContact(contact)\n    onDelete(contact)\n  }\n\n  const handleCancel = () => {\n    refreshContactInfo()\n    onCancel()\n  }\n\n  return (\n    <article className=\"contact-display\">\n      <div className=\"first-name\">\n        <label>First Name: </label>\n        <input type=\"text\" value={firstName} onChange={handleFirstNameChange}/>\n      </div>\n\n      <div className=\"last-name\">\n        <label>Last Name: </label>\n        <input type=\"text\" value={lastName} onChange={handleLastNameChange}/>\n      </div>\n\n      <div className=\"emails\">\n        <label>Emails</label>\n        <ul>\n          { emails.map(email => \n            <li key={email}>\n              <div>{email}</div>\n              <MinusButton \n                onClick={() => removeEmail(email)} \n                className=\"remove\"\n              />\n            </li>\n          )}\n          { isAddingEmail\n              ? <li className=\"add-email-form\">\n                  <label>New Email: </label> \n                  <input \n                    type=\"text\" \n                    value={newEmail} \n                    onChange={handleNewEmailChange} \n                  />\n                  <button onClick={completeNewEmail}>Complete</button>\n                </li>\n              : <li onClick={() => setAddingEmail(true)} className=\"add-email\">\n                  <PlusButton onClick={() => setAddingEmail(true)} size=\"small\" />\n                  <div>add email</div>\n                </li>\n          }\n        </ul>\n      </div>\n\n      <div className=\"message\">\n        {message}\n      </div>\n\n      <div className=\"buttons\">\n        <button className=\"delete\" onClick={handleDelete}>Delete</button>\n        <button className=\"cancel\" onClick={handleCancel}>Cancel</button>\n        <button className=\"save\" onClick={handleSave}>Save</button>\n      </div>\n\n    \n    </article>\n  )\n\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.scss'\nimport { Contact } from './data/contacts'\nimport { ContactContextProvider, useContact } from './context/Contact'\nimport ContactsList from './ContactsList'\nimport ContactDisplay from './ContactDisplay'\nimport PlusButton from './PlusButton'\n\nfunction App() {\n  return (\n    <ContactContextProvider><Body/></ContactContextProvider>\n  )\n}\n\nfunction Body() {\n  const {contacts, fetchMoreContacts} = useContact()\n\n  const [contactId, setContactId] = useState<number | null>(null)\n  const [contact, setContact] = useState<Contact | null>(null)\n\n  // Fetch first page of contacts on page load\n  useEffect(() => {\n    fetchMoreContacts()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const result = contacts.find(({id}) => id === contactId)\n    if (result !== undefined) {\n      setContact(result)\n    } else {\n      setContact(null)\n    }\n  }, [contacts, contactId])\n\n  const onCreate = () => {\n    const newContact = {\n      id: NaN,\n      firstName: \"\",\n      lastName: \"\",\n      emails: []\n    }\n\n    setContact(newContact)\n  }\n\n  return (\n    <>\n      <div className=\"sidebar\">\n        <div className=\"header\">\n          <h1>Contacts</h1>\n          <PlusButton onClick={onCreate} size=\"large\" />\n        </div>\n        <ContactsList \n          onClick={ ({id}) => setContactId(id) } \n          selectedContactId={contactId}\n        />\n      </div>\n      <div className=\"content\">\n        {\n          contact\n            ? <ContactDisplay \n                contact={contact} \n                onDelete={() => setContactId(null)}\n                onSave={({id}) => setContactId(id)}\n                onCancel={() => setContactId(null)}\n              />\n            : <div>Select contact on left</div>\n        }\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)  \n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}